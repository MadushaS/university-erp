name: Deploy to Azure

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  AZURE_RESOURCE_GROUP: rg-university-erp
  BACKEND_APP_NAME: university-erp-backend
  FRONTEND_APP_NAME: university-erp-frontend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'
          cache-dependency-path: frontend/pnpm-lock.yaml

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Validate secrets availability
        run: |
          echo "üîç Validating required secrets..."
          
          # Backend secrets validation
          if [ -z "${{ secrets.BACKEND_DATABASE_URL }}" ]; then
            echo "‚ùå ERROR: BACKEND_DATABASE_URL secret is not set!"
            exit 1
          fi
          if [ -z "${{ secrets.BACKEND_DATABASE_USERNAME }}" ]; then
            echo "‚ùå ERROR: BACKEND_DATABASE_USERNAME secret is not set!"
            exit 1
          fi
          if [ -z "${{ secrets.BACKEND_DATABASE_PASSWORD }}" ]; then
            echo "‚ùå ERROR: BACKEND_DATABASE_PASSWORD secret is not set!"
            exit 1
          fi
          if [ -z "${{ secrets.BACKEND_JWT_SECRET }}" ]; then
            echo "‚ùå ERROR: BACKEND_JWT_SECRET secret is not set!"
            exit 1
          fi
          
          echo "‚úÖ All required backend secrets are available!"

      - name: Create Azure resources if they don't exist
        run: |
          # Create resource group if it doesn't exist
          az group create --name ${{ env.AZURE_RESOURCE_GROUP }} --location eastus --output none || true
          
          # Create app service plan (F1 - Free tier)
          az appservice plan create \
            --name asp-university-erp \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --location eastus \
            --sku F1 \
            --is-linux \
            --output none || true

      - name: Create/Update backend web app (JAR deployment)
        run: |
          # Create web app for JAR deployment
          az webapp create \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan asp-university-erp \
            --runtime "JAVA:17-java17" \
            --output none || true

          # Set ALL application settings (including secrets)
          az webapp config appsettings set \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              WEBSITES_PORT=8080 \
              SERVER_PORT=8080 \
              SPRING_PROFILES_ACTIVE=prod \
              JAVA_OPTS="-Xmx512m -Xms256m -Djava.security.egd=file:/dev/./urandom" \
              DATABASE_URL="${{ secrets.BACKEND_DATABASE_URL }}" \
              DATABASE_USERNAME="${{ secrets.BACKEND_DATABASE_USERNAME }}" \
              DATABASE_PASSWORD="${{ secrets.BACKEND_DATABASE_PASSWORD }}" \
              JWT_SECRET="${{ secrets.BACKEND_JWT_SECRET }}" \
              CORS_ALLOWED_ORIGINS="${{ secrets.BACKEND_CORS_ALLOWED_ORIGINS }}"

      - name: Deploy backend JAR to Azure
        run: |
          # Build the JAR file first
          cd backend
          chmod +x mvnw
          ./mvnw clean package -DskipTests
          
          # Find the JAR file and deploy it
          JAR_FILE=$(find target -name "*.jar" -not -name "*sources.jar" -not -name "*javadoc.jar" | head -1)
          echo "Deploying JAR file: $JAR_FILE"
          
          # Deploy the JAR file to Azure App Service  
          az webapp deployment source config-zip \
            --name ${{ env.BACKEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --src "$JAR_FILE"

      - name: Create/Update frontend web app (Node.js deployment)
        run: |
          # Create web app for Node.js deployment
          az webapp create \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan asp-university-erp \
            --runtime "NODE:18-lts" \
            --output none || true

          # Set ALL application settings (including secrets)
          az webapp config appsettings set \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              WEBSITES_PORT=3000 \
              NODE_ENV=production \
              NEXT_PUBLIC_API_URL="${{ secrets.FRONTEND_NEXT_PUBLIC_API_URL }}" \
              NEXT_PUBLIC_APP_URL="${{ secrets.FRONTEND_NEXT_PUBLIC_APP_URL }}" \
              NEXT_PUBLIC_JWT_EXPIRY_TIME="${{ secrets.FRONTEND_NEXT_PUBLIC_JWT_EXPIRY_TIME }}" \
              NEXT_PUBLIC_REFRESH_TOKEN_EXPIRY="${{ secrets.FRONTEND_NEXT_PUBLIC_REFRESH_TOKEN_EXPIRY }}"

      - name: Deploy frontend to Azure
        run: |
          # Build and deploy the frontend
          cd frontend
          
          # Check if we're using pnpm or npm
          if [ -f "pnpm-lock.yaml" ]; then
            npm install -g pnpm
            pnpm install
            pnpm run build
          else
            npm ci
            npm run build
          fi
          
          # Create deployment package (exclude node_modules and cache)
          zip -r ../frontend-deploy.zip . -x "node_modules/*" ".next/cache/*" "test-results/*" "playwright-report/*"
          cd ..
          
          # Deploy to Azure App Service
          az webapp deployment source config-zip \
            --name ${{ env.FRONTEND_APP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --src frontend-deploy.zip

      - name: Restart web apps
        run: |
          az webapp restart --name ${{ env.BACKEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
          az webapp restart --name ${{ env.FRONTEND_APP_NAME }} --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Show deployment URLs
        run: |
          echo "üöÄ Deployment completed!"
          echo "Backend: https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net"
          echo "Frontend: https://${{ env.FRONTEND_APP_NAME }}.azurewebsites.net"
          
      - name: Check backend health after deployment
        run: |
          echo "‚è≥ Waiting for backend to start..."
          sleep 60
          
          echo "üîç Checking backend health endpoint..."
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            echo "Attempt $((RETRY_COUNT + 1)) of $MAX_RETRIES..."
            
            if curl -f -v --max-time 30 https://${{ env.BACKEND_APP_NAME }}.azurewebsites.net/actuator/health; then
              echo "‚úÖ Backend health check passed!"
              break
            else
              echo "‚ùå Health check failed on attempt $((RETRY_COUNT + 1))"
              RETRY_COUNT=$((RETRY_COUNT + 1))
              
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "‚è≥ Waiting 30 seconds before retry..."
                sleep 30
              fi
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "üö® All health check attempts failed!"
            echo "üìã Attempting to download application logs for debugging..."
            
            az webapp log download \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --log-file backend-logs.zip || echo "Could not download logs"
              
            if [ -f backend-logs.zip ]; then
              echo "üìÑ Extracting logs..."
              unzip -l backend-logs.zip || echo "Could not extract logs"
            fi
            
            echo "üîç Checking container logs..."
            az webapp log tail \
              --name ${{ env.BACKEND_APP_NAME }} \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} || echo "Could not tail logs"
              
            exit 1
          fi
